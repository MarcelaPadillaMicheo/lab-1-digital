/*
 * File:   main.c
 * Author: marce
 *
 * Created on July 18, 2023, 12:34 AM
 */
// Configuración de los bits de configuración del PIC microcontrolador
#pragma config FOSC = INTRC_NOCLKOUT // Oscilador interno sin salida de reloj
#pragma config WDTE = OFF // Watchdog Timer deshabilitado
#pragma config PWRTE = OFF // Power-up Timer deshabilitado
#pragma config MCLRE = OFF // MCLR deshabilitado (pin utilizado como entrada)
#pragma config CP = OFF // Protección de código deshabilitada
#pragma config CPD = OFF // Protección de datos deshabilitada
#pragma config BOREN = OFF // Brown-out Reset deshabilitado
#pragma config IESO = OFF // Switchover de Osciladores deshabilitado
#pragma config FCMEN = OFF // Monitor Fail-Safe Clock deshabilitado
#pragma config LVP = OFF // Programación de bajo voltaje deshabilitada

#pragma config BOR4V = BOR40V // Brown-out Reset en 4.0V
#pragma config WRT = OFF // Protección de escritura deshabilitada

#include <stdint.h>
#include <xc.h>
#include "ADC.h"
#include "TIMER.h"
#include "PUSHBUTTONS.h"

#define _XTAL_FREQ 4000000 // Frecuencia de oscilador externo (4MHz)
#define tmr0_value 244 // Valor para el TMR0 que genera un intervalo de 3ms
uint8_t pot, display;
uint8_t unidad, decena;


const char tabla[] =
{
    0b00111111, // 0
    0b00000110, // 1
    0b01011011, // 2
    0b01001111, // 3
    0b01100110, // 4
    0b01101101, // 5
    0b01111101, // 6
    0b00000111, // 7
    0b01111111, // 8
    0b01101111, // 9
    0b01110111, // A
    0b01111100, // B
    0b00111001, // C
    0b01011110, // D
    0b01111001, // E
    0b01110001  // F

};
void setup(void);

// Manejador de interrupciones
void __interrupt() isr(void) {
    
    // Interrupción por cambio de estado en el puerto B
    if (RBIF == 1) { // Si la bandera de interrupción del puerto B está activada
        if (RB0 == 0) { // Si el pin RB0 está en (0)
            PORTC++; // Incrementa el valor de PORTC en 1
        } else if (RB1 == 0) { // Si el pin RB1 está en (0)
            PORTC--; // Decrementa el valor de PORTC en 1
        }
        INTCONbits.RBIF = 0; // Limpiar la bandera de interrupción por cambio en el puerto B
    }
    
    // Interrupción por desbordamiento del TMR0 (temporizador)
    else if (T0IF == 1) { 
        PORTE = 0x00; // Apagar todos los segmentos del display

        if (display == 1) { // Mostrar la unidad
            RE0 = 1; // Encender el dígito correspondiente a la unidad
            PORTD = tabla[unidad]; // Mostrar el valor de la unidad en el display
        } else if (display == 2) { // Mostrar la decena
            RE1 = 1; // Encender el dígito correspondiente a la decena
            PORTD = tabla[decena]; // Mostrar el valor de la decena en el display
        } else if (display == 3) { // Cambiar de dígito
            display = 0; // Reiniciar la variable para volver a mostrar la unidad en el siguiente ciclo
        }

        ++display; // Incrementar el contador de dígitos a mostrar
        INTCONbits.T0IF = 0; // Limpiar la bandera de interrupción del TMR0
        TMR0 = tmr0_value; // Reiniciar el contador del TMR0
    }
    return;
}

void main(void) {
    setup(); // Llamar a la función de configuración
    
    // Bucle infinito
    while (1) {
        pot = ADC_READ(); // Leer el valor analógico del potenciómetro
        decena = DECENA(pot); // Obtener el valor de la decena del potenciómetro
        unidad = UNIDAD(pot); // Obtener el valor de la unidad del potenciómetro
        
        // Comparar el valor del potenciómetro con el valor en el puerto C
        // Establecer RB7 en 1 si el valor del potenciómetro es mayor que el valor en el puerto C, de lo contrario, establecerlo en 0
        RB7 = (pot > PORTC) ? 1 : 0;
    }
}

void setup(void) {
    // Configuración de los pines del microcontrolador   
    ANSEL = 0b00000001;     (AN0) 
    ANSELH = 0x00;
    
    TRISA = 0x00;
    TRISB = 0b00000011;     
    TRISC = 0x00;
    TRISD = 0x00;
    TRISE = 0x00;

    PORTA = 0x00;
    PORTB = 0x00;
    PORTC = 0x00;
    PORTD = 0x00;
    PORTE = 0x00;
    
    // Configuración del oscilador a 4MHz
    OSCILLATOR(2);
    
    // Configuración del TMR0
    PRESCALER_TMR0(7); // Establecer el preescalador del TMR0 a 1:256
    TMR0 = tmr0_value; // Inicializar el valor del TMR0
    
    // Configuración del PULL UP
    IOC_INT(0b00000011); // Habilitar las interrupciones por cambio en RB0 y RB1
    
    // Configuración del ADC
    ADC_INIT(0); // Inicializar el módulo ADC con AN0 como entrada   
    
    ADCON1bits.VCFG0 = 0; // Configurar la referencia de voltaje Vref- a Vss
    ADCON1bits.VCFG1 = 0; // Configurar la referencia de voltaje Vref+ a Vdd
    
    ADCON0bits.ADCS0 = 0; // Configurar el clock del ADC a Fosc/32
    ADCON0bits.ADCS1 = 1;

    ADCON1bits.ADFM = 0; // Justificar a la izquierda los bits del resultado del ADC
    
    ADCON0bits.ADON = 1; // Encender el módulo ADC
    __delay_us(50); // Esperar un corto tiempo para que el módulo ADC se estabilice
    ADCON0bits.GO_nDONE = 1; // Iniciar la conversión ADC
    
    // Configuración de las interrupciones
    INTCONbits.GIE = 1; // Habilitar las interrupciones globales
    INTCONbits.RBIE = 1; // Habilitar las interrupciones por cambio en RB0 y RB1
    INTCONbits.RBIF = 0; // Limpiar la bandera de interrupción por cambio en RB0 y RB1
    INTCONbits.T0IF = 0; // Limpiar la bandera de interrupción del TMR0
    INTCONbits.T0IE = 1; // Habilitar las interrupciones del TMR0

    unidad = 0;             
    decena = 0;
    display = 0;
    pot = 0;
    
    return;
}
